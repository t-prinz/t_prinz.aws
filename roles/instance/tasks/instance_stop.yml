---
#
# Manages the state of the instances by specifying a tag, e.g.
#
# ansible-playbook -i <inventory> instance_manage.yml --tags stop
#
# Tag options:
#
#   stop: stop the instances
#   start: start instances
#   delete: delete instances and all resources associated with the instances:
#     - route53 dns entries
#     - elastic ip's
#     - instance
#


#    - name: gather information about the VPC
#      amazon.aws.ec2_vpc_net_info:
#        aws_access_key: "{{ aws_access_key_id }}"
#        aws_secret_key: "{{ aws_secret_access_key }}"
#        filters:
#          "tag:Name": "{{ aws_vpc_name }}"
#        region: "{{ aws_region }}"
#      register: vpc_info
#      tags:
#        - always

#    - name: print VPC information
#      debug:
#        var: vpc_info
#        verbosity: 1
#      tags:
#        - always

#    - name: print VPC id information
#      debug:
#        var: vpc_info.vpcs[0].id
#        verbosity: 1
#      tags:
#        - always

#    - name: get instance info
#      amazon.aws.ec2_instance_info:
#        aws_access_key: "{{ aws_access_key_id }}"
#        aws_secret_key: "{{ aws_secret_access_key }}"
#        filters:
#          vpc-id: "{{ vpc_info.vpcs[0].id }}"
#        region: "{{ aws_region }}"
#      register: instance_info
#      tags:
#        - always

- name: get instance info
  amazon.aws.ec2_instance_info:
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    filters:
      "tag:Name": "{{ aws_base_name }}-{{ aws_instance.ansible_instance_shortname }}"
    region: "{{ aws_region }}"
  register: instance_info
  tags:
    - always

- name: print instance info
  debug:
    var: instance_info[0].instance_id
#    verbosity: 1

#    - name: print individual instance id's
#      debug:
#        var: item.instance_id
#        verbosity: 1
#      with_items: "{{ instance_info.instances }}"
#      tags:
#        - always

#    - name: print instance tag "Name"
#      debug:
#        var: item.tags.Name
#        verbosity: 1
#      with_items: "{{ instance_info.instances }}"
#      tags:
#        - always

#    - name: get elastic ip info
#      community.aws.ec2_eip_info:
#        aws_access_key: "{{ aws_access_key_id }}"
#        aws_secret_key: "{{ aws_secret_access_key }}"
#        filters:
#          tag:Name: "{{ item.tags.Name }}"
#        region: "{{ aws_region }}"
#      register: eip_info
#      with_items: "{{ instance_info.instances }}"
#      tags:
#        - always

#    - name: print elastic ip info
#      debug:
#        var: eip_info
#        verbosity: 1
#      tags:
#        - always

#    - name: get route53 dns info
#      block:
#        - name: get route53 zone id
#          community.aws.route53_zone:
#            aws_access_key: "{{ aws_access_key_id }}"
#            aws_secret_key: "{{ aws_secret_access_key }}"
#            zone: "{{ aws_route53_zone }}"
#          register: route53_zone_info
#          tags:
#            - always

#        - name: get route53 dns info for the instances
#          community.aws.route53_info:
#            aws_access_key: "{{ aws_access_key_id }}"
#            aws_secret_key: "{{ aws_secret_access_key }}"
#            type: A
#            query: record_sets
#            hosted_zone_id: "{{ route53_zone_info.zone_id }}"
#            max_items: "{{ '1'|int }}"
#            start_record_name: "{{ item.addresses[0].tags.Name }}.{{ aws_route53_zone }}"
#          when: item.addresses[0].tags.Name is defined
#          with_items: "{{ eip_info.results }}"
#          register: route53_out
#          tags:
#            - always

#        - name: print route53 dns info
#          debug:
#            var: route53_out
#            verbosity: 1
#          tags:
#            - always

#    - name: stop instances
#      amazon.aws.ec2_instance:
#        aws_access_key: "{{ aws_access_key_id }}"
#        aws_secret_key: "{{ aws_secret_access_key }}"
#        image_id: "{{ item.image_id }}"
#        instance_ids: "{{ item.instance_id }}"
#        instance_type: "{{ item.instance_type }}"
#        name: "{{ item.tags.Name }}"
#        region: "{{ aws_region }}"
#        state: stopped
#      with_items: "{{ instance_info.instances }}"
#      tags:
#        - never
#        - stop



#- name: create and launch instance
#  amazon.aws.ec2_instance:
#    aws_access_key: "{{ aws_access_key_id }}"
#    aws_secret_key: "{{ aws_secret_access_key }}"
#    image_id: "{{ aws_instance.aws_image_id }}"
#    instance_type: "{{ aws_instance.aws_instance_type }}"
#    key_name: "{{ aws_keypair }}"
#    name: "{{ aws_base_name }}-{{ aws_instance.ansible_instance_shortname }}"
#    network:
#      assign_public_ip: "{{ aws_instance.aws_assign_public_ip }}"
#    region: "{{ aws_region }}"
#    security_group: "{{ security_group_info.security_groups[0].group_id }}"
#    state: started
#    tags:
#      OS_Type: "{{ aws_instance.instance_os_type }}"
#      define_hostname: "{{ aws_instance.define_hostname }}"
#      update_etchosts_localhost: "{{ aws_instance.update_etchosts_localhost }}"
##    user_data: "{{ lookup('file', 'win_ec2_user_data.ps1') if (aws_instance.instance_os_type == 'Windows') else omit }}"
#    user_data: "{{ lookup('template', 'win_ec2_user_data.ps1.j2') if (aws_instance.instance_os_type == 'Windows') else omit }}"
#    volumes: "{{ aws_instance.aws_volume_list }}"
#    vpc_subnet_id: "{{ subnet_info.subnets[0].id }}"
#    wait: true
#  register: instance_info
